// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// -----------------------------
// DemoMart - Prisma Schema
// -----------------------------

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// -------------------------
// Enums
// -------------------------
enum OrderStatus {
  processing
  paid
  shipped
  cancelled
  refunded
}

// --------------------------
// Catalog
// --------------------------
model Category {
  id   String @id @default(cuid())
  name String @db.VarChar(120)
  slug String @unique @db.VarChar(120)
  sort Int    @default(0)

  products Product[]

  @@index([sort])
}

model Product {
  id          String   @id @default(cuid())
  category    Category @relation(fields: [categoryId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  categoryId  String
  slug        String   @unique @db.VarChar(120)
  name        String   @db.VarChar(200)
  description String?
  active      Boolean  @default(true)
  createdAt   DateTime @updatedAt

  variants  ProductVariant[]
  assets    Asset[]
  OrderItem OrderItem[]

  @@index([categoryId])
  @@index([active])
}

model ProductVariant {
  id         String  @id @default(cuid())
  product    Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId  String
  sku        String  @unique @db.VarChar(120)
  option     Json?
  priceCents Int
  currency   String  @default("USD") @db.Char(3)
  stockQty   Int     @default(0)
  active     Boolean @default(true)

  cartItems     CartItem[]
  orderItems    OrderItem[]
  wishlistItems WishlistItem[]

  @@index([productId])
  @@index([active])
}

model Asset {
  id        String  @id @default(cuid())
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId String
  url       String
  kind      String  @db.VarChar(32) // "thumbnail" | "gallery"
  sort      Int     @default(0)

  @@index([productId, sort])
}

// -----------------------
// Users & Addresses
// -----------------------
model User {
  id            String       @id @default(cuid())
  name          String?      @db.VarChar(120)
  email         String?      @unique @db.VarChar(200)
  isDemo        Boolean      @default(false)
  demoSandbox   DemoSandbox? @relation(fields: [demoSandboxId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  demoSandboxId String?
  preferences   Json?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  addresses Address[]
  carts     Cart[]
  orders    Order[]
  wishlist  Wishlist?
  actions   UserActions[]
  sessions  Session[]
}

model Address {
  id                String  @id @default(cuid())
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId            String
  line1             String  @db.VarChar(200)
  line2             String? @db.VarChar(200)
  city              String  @db.VarChar(100)
  region            String  @db.VarChar(100)
  postalCode        String  @db.VarChar(20)
  country           String  @db.Char(2)
  isDefaultShipping Boolean @default(false)
  isDefaultBilling  Boolean @default(false)

  @@index([userId])
}

// -----------------------
// Wishlist
// -----------------------
model Wishlist {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String   @unique
  createdAt DateTime @default(now())
  isDemo    Boolean  @default(false)

  items WishlistItem[]
}

model WishlistItem {
  id         String         @id @default(cuid())
  wishlist   Wishlist       @relation(fields: [wishlistId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  wishlistId String
  variant    ProductVariant @relation(fields: [variantId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  variantId  String

  @@unique([wishlistId, variantId])
  @@index([variantId])
}

// -----------------------
// Cart
// -----------------------
model Cart {
  id         String   @id @default(cuid())
  user       User?    @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  userId     String?
  sessionKey String?  @unique @db.VarChar(64)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  isDemo     Boolean  @default(false)

  items CartItem[]

  @@index([userId])
}

model CartItem {
  id             String         @id @default(cuid())
  cart           Cart           @relation(fields: [cartId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  cartId         String
  variant        ProductVariant @relation(fields: [variantId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  variantId      String
  quantity       Int
  unitPriceCents Int
  currency       String         @db.Char(3)

  @@unique([cartId, variantId]) // one row per variant in a cart
  @@index([variantId])
}

// -----------------------
// Orders
// -----------------------
model Order {
  id              String      @id @default(cuid())
  user            User?       @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  userId          String?
  number          String      @unique @db.VarChar(20)
  status          OrderStatus
  subtotalCents   Int
  taxCents        Int         @default(0)
  shippingCents   Int         @default(0)
  discountCents   Int         @default(0)
  totalCents      Int
  currency        String      @db.Char(3)
  placedAt        DateTime    @default(now())
  isDemo          Boolean     @default(false)
  idempotencyKey  String?     @unique // prevents duplicate checkouts
  shippingAddress Json
  billingAddress  Json

  paymentStatus OrderPaymentStatus @default(unpaid)
  payments      Payment[]

  items OrderItem[]

  @@index([userId])
  @@index([status])
}

model OrderItem {
  id             String         @id @default(cuid())
  order          Order          @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orderId        String
  product        Product        @relation(fields: [productId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  productId      String
  variant        ProductVariant @relation(fields: [variantId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  variantId      String
  nameSnapshot   String         @db.VarChar(200)
  skuSnapshot    String         @db.VarChar(120)
  quantity       Int
  unitPriceCents Int
  currency       String         @db.Char(3)
  lineTotalCents Int

  @@index([orderId])
  @@index([variantId])
}

// ------------------------------
// User Actions (analytics-lite)
// ------------------------------
model UserActions {
  id         String   @id @default(cuid())
  user       User?    @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  userId     String?
  type       String   @db.VarChar(50) // e.g., view_product, add_to_cart, purchase, edit_profile
  payload    Json?
  occurredAt DateTime @default(now())

  @@index([userId, occurredAt])
}

// ------------------------------
// Sessions & Demo Sandboxes
// ------------------------------
model Session {
  id            String       @id @default(cuid()) // cookie dm_sid
  user          User?        @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  userId        String?
  demoSandbox   DemoSandbox? @relation(fields: [demoSandboxId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  demoSandboxId String?
  createdAt     DateTime     @default(now())
  lastSeenAt    DateTime     @default(now())
  expiresAt     DateTime

  @@index([userId])
  @@index([demoSandboxId])
  @@index([expiresAt])
}

model DemoSandbox {
  id        String   @id @default(cuid())
  persona   String   @db.VarChar(50) // "alice" | "bob"
  expiresAt DateTime
  createdAt DateTime @default(now())

  users    User[]
  sessions Session[]

  @@index([expiresAt])
}

model DemoResetLog {
  id          String   @id @default(cuid())
  resetAt     DateTime @default(now())
  triggeredBy String   @db.VarChar(20) // "button" | "deploy" | "manual"
}

enum PaymentStatus {
  requires_action
  processing
  succeeded
  failed
  canceled
}

enum OrderPaymentStatus {
  unpaid
  paid
  failed
  refunded
}

model Payment {
  id      String @id @default(cuid())
  orderId String
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  amountCents Int
  currency    String
  status      PaymentStatus

  stripePaymentIntentId String? @unique
  clientSecret          String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([orderId])
  @@index([status])
}
